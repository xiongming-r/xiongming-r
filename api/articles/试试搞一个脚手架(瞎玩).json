{"title":"试试搞一个脚手架(瞎玩)","uid":"3f61c0bdcd846206aa0219d8f28ee513","slug":"试试搞一个脚手架(瞎玩)","date":"2023-12-06T06:52:25.020Z","updated":"2023-12-06T08:37:32.334Z","comments":true,"path":"api/articles/试试搞一个脚手架(瞎玩).json","keywords":null,"cover":[],"content":"<h1 id=\"实现一个类似-Vue-CLI-的-Node-脚手架\"><a href=\"#实现一个类似-Vue-CLI-的-Node-脚手架\" class=\"headerlink\" title=\"实现一个类似 Vue-CLI 的 Node 脚手架\"></a>实现一个类似 Vue-CLI 的 Node 脚手架</h1><p>单纯想尝试一下实现类似 Vue-CLI 的脚手架，这实际上更像一个脚本。</p>\n<h2 id=\"设想\"><a href=\"#设想\" class=\"headerlink\" title=\"设想\"></a>设想</h2><p>想要创建一个可以全局安装并使用的工具，类似于 <code>vue-cli</code>。这个工具应该能与命令行交互，让用户选择自己想要的模板，然后生成相应的项目。</p>\n<h2 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h2><h3 id=\"第一步：了解-Node-相关工具\"><a href=\"#第一步：了解-Node-相关工具\" class=\"headerlink\" title=\"第一步：了解 Node 相关工具\"></a>第一步：了解 Node 相关工具</h3><p>由于擅长 JavaScript，决定使用 Node.js 来完成这个工具。首先，需要了解以下工具：</p>\n<ul>\n<li><strong>Inquirer.js</strong>: 用于创建交互式命令行用户界面。</li>\n<li><strong>download-git-repo</strong>: 用来下载或克隆模板项目。</li>\n<li><strong>rimraf</strong>: 用来删除 <code>.git</code> 记录等。</li>\n<li><strong>chalk</strong> 和 <strong>figlet</strong>: 用来展示欢迎语。</li>\n<li><strong>ora</strong>: 用于显示进度。</li>\n<li><strong>fs</strong>: 处理文件系统相关操作。</li>\n</ul>\n<h3 id=\"第二步：初始化项目并编写代码\"><a href=\"#第二步：初始化项目并编写代码\" class=\"headerlink\" title=\"第二步：初始化项目并编写代码\"></a>第二步：初始化项目并编写代码</h3><ol>\n<li><p>初始化一个 Node.js 项目并安装依赖：</p>\n <pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">mkdir my-scaffolding-tool\ncd my-scaffolding-tool\nnpm init -y\nnpm install inquirer ...</code></pre>\n</li>\n<li><p>编写脚手架代码：</p>\n<p> 2.1 初始化 <code>bin/index.js</code>，引入相关库，定义一个 <code>init</code> 函数，并主动调用它。首先写一个简单的欢迎语和一个交互函数。</p>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">#!&#x2F;usr&#x2F;bin&#x2F;env node\nimport inquirer from &#39;inquirer&#39;\nimport download from &#39;download-git-repo&#39;;\nimport chalk from &#39;chalk&#39;\nimport figlet from &#39;figlet&#39;;\nimport ora from &#39;ora&#39;\nimport path from &#39;path&#39;\nimport fs from &#39;fs&#39;\nimport &#123; sync as rimraf &#125; from &#39;rimraf&#39;;\n\nasync function init()&#123;\n    console.log(chalk.yellow(figlet.textSync(&#39;super-cli&#39;, &#123; horizontalLayout: &#39;full&#39; &#125;)));\n    const answers &#x3D; await inquirer.prompt([...])\n&#125;\n\ninit()</code></pre>\n\n<p> <img src=\"/../img/jsj_1.png\" alt=\"CLI 欢迎界面\">  <!-- 替换为实际的图片链接 --></p>\n<p> 2.2 读取运行时目录，下载模板文件。这里模板文件地址是固定的。</p>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; ... 前面的代码\n\ntry &#123;\n    &#x2F;&#x2F; 模板下载逻辑\n&#125; catch (error) &#123;\n    &#x2F;&#x2F; 错误处理\n&#125;</code></pre>\n\n<p> <img src=\"/../img/jsj_2.png\" alt=\"模板下载效果\">  <!-- 替换为实际的图片链接 --></p>\n<p> 貌似一切正常。</p>\n<p> 2.3 定义一些操作项目的函数。具体的代码实现这里就不展示了。对这个玩具项目感兴趣的小伙伴可以在 GitHub 上查看和尝试。</p>\n<p> <a href=\"https://github.com/xiongming-r/vue-widget\">GitHub 仓库链接</a></p>\n</li>\n</ol>\n","feature":true,"text":"实现一个类似 Vue-CLI 的 Node 脚手架单纯想尝试一下实现类似 Vue-CLI 的脚手架，这实际上更像一个脚本。 设想想要创建一个可以全局安装并使用的工具，类似于 vue-cli。这个工具应该能与命令行交互，让用户选择自己想要的模板，然后生成相应的项目。 实现步骤第一步...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"node","slug":"node","count":1,"path":"api/categories/node.json"}],"tags":[{"name":"node","slug":"node","count":1,"path":"api/tags/node.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%B1%BB%E4%BC%BC-Vue-CLI-%E7%9A%84-Node-%E8%84%9A%E6%89%8B%E6%9E%B6\"><span class=\"toc-text\">实现一个类似 Vue-CLI 的 Node 脚手架</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E6%83%B3\"><span class=\"toc-text\">设想</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">实现步骤</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E4%BA%86%E8%A7%A3-Node-%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">第一步：了解 Node 相关工具</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE%E5%B9%B6%E7%BC%96%E5%86%99%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">第二步：初始化项目并编写代码</span></a></li></ol></li></ol></li></ol>","author":{"name":"xm","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"动态配置文件问题","uid":"e37b5468da7c2bd7ab9ce67d0133d9cb","slug":"动态配置文件问题","date":"2023-11-09T04:02:56.763Z","updated":"2023-12-06T08:40:14.137Z","comments":true,"path":"api/articles/动态配置文件问题.json","keywords":null,"cover":null,"text":"记录一下遇到的一个奇怪的场景需求,因为各种原因,需要让前端项目在build之后,还能动态配置请求的后端接口地址,走的是docker镜像那一套,这个场景很蛋疼,build之后的vue项目,是一个静态包,设置好的环境变量也是在构建时设置好的, 也就是如果不走构建的步骤,无法保证动态,...","link":"","photos":[],"count_time":{"symbolsCount":358,"symbolsTime":"1 mins."},"categories":[{"name":"疑难杂症","slug":"疑难杂症","count":1,"path":"api/categories/疑难杂症.json"}],"tags":[{"name":"疑难杂症","slug":"疑难杂症","count":1,"path":"api/tags/疑难杂症.json"}],"author":{"name":"xm","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}